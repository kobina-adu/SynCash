services:
  api-gateway:
    build:
      context: ./apps/api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - RESEND_API=re_Dwqg3Bpw_H5GsXF4xrsRRATahA7VF2kEw
      - DATABASE_URL=postgres://syncash:syncash@syncash:5432/syncash
      - BETTER_AUTH_SECRET=AvFjmRaFmTIyosAaoCm938FT9UXsn7tI
      - BETTER_AUTH_URL=http://localhost:8080
      - PORT=8080
    depends_on:
      - orchestrator
    restart: always

  notifications-service:
    build:
      context: ./apps/notifications-service
    container_name: notifications-service
    ports:
      - "8040:8040"
    environment:
      - PORT=8040
    restart: always
    depends_on:
      - redis


  web:
    build:
      context: ./syncash-elite
    container_name: web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    restart: always
    depends_on:
      - api-gateway

  # Orchestrator API
  orchestrator:
    build:
      context: ./apps/orchestrator
    container_name: orchestrator
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgres://syncash:syncash@syncash:5432/syncash
      - REDIS_URL=redis://redis:6379/
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: synccash
      POSTGRES_USER: synccash
      POSTGRES_PASSWORD: synccash
      PG_DB_URL: postgres://syncash:syncash@syncash:5432/syncash
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U synccash -d synccash_orchestrator"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "9091:9091"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=synccash123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
